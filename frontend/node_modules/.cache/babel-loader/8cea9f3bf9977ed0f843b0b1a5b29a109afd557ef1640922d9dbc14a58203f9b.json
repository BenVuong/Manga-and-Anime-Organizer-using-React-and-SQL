{"ast":null,"code":"const axios = require('axios');\nconst cheerio = require('cheerio');\nconst SEASON_URI = 'https://myanimelist.net/anime/season/';\nconst maxYear = 1901 + new Date().getYear();\nconst possibleSeasons = {\n  winter: 1,\n  spring: 1,\n  summer: 1,\n  fall: 1\n};\nconst type2Class = {\n  TV: 1,\n  TVNew: 1,\n  TVCon: 1,\n  OVAs: 2,\n  Movies: 3,\n  Specials: 4,\n  ONAs: 5\n};\nconst possibleTypes = Object.keys(type2Class);\nconst possibleTV = {\n  TVNew: 'TV (New)',\n  TVCon: 'TV (Continuing)'\n};\nconst getType = (type, $) => {\n  const result = [];\n  const typeString = possibleTypes.find(_type => type === _type);\n  let classToSearch = `.js-seasonal-anime-list-key-${type2Class[typeString]} .seasonal-anime.js-seasonal-anime`;\n  const typeClass = `.js-seasonal-anime-list-key-${type2Class[typeString]}`;\n\n  // If TVNew or TVCon are selected, filter them out to the specific elements on page\n  if (Object.keys(possibleTV).includes(typeString)) {\n    const tvType = possibleTV[typeString];\n    $(typeClass).children('.anime-header').each(function () {\n      if ($(this).text() === tvType) {\n        classToSearch = $(this).parent().children().filter(function () {\n          return $(this).hasClass('seasonal-anime');\n        });\n      }\n    });\n  }\n  $(classToSearch).each(function () {\n    // For obvious reasons (or not)\n    if ($(this).hasClass('kids') || $(this).hasClass('r18')) return;\n    const general = $(this).find('div:nth-child(1)');\n    const picture = $(this).find('.image').find('img');\n    const prod = $(this).find('.prodsrc');\n    const info = $(this).find('.information');\n    const synopsis = $(this).find('.synopsis');\n    result.push({\n      picture: picture.attr(picture.hasClass('lazyload') ? 'data-src' : 'src'),\n      synopsis: synopsis.find('span').text().trim(),\n      licensor: synopsis.find('p').attr('data-licensors') ? synopsis.find('p').attr('data-licensors').slice(0, -1) : '',\n      title: general.find('.title').find('h2 a').text().trim(),\n      link: general.find('.title').find('a').attr('href') ? general.find('.title').find('a').attr('href').replace('/video', '') : '',\n      genres: general.find('.genres').find('.genres-inner').text().trim().split('\\n      \\n        '),\n      producers: prod.find('.producer').text().trim().split(', '),\n      fromType: prod.find('.source').text().trim(),\n      nbEp: prod.find('.eps').find('a').text().trim().replace(' eps', ''),\n      releaseDate: info.find('.info').find('span').text().trim(),\n      score: info.find('.scormem').find('.score').text().trim(),\n      members: info.find('.scormem').find('.member.fl-r').text().trim().replace(/,/g, '')\n    });\n  });\n  return result;\n};\n\n/**\n * Allows to gather seasonal information from myanimelist.net\n * @param {number|string} year - The year of the season you want to look up for.\n * @param {string} season - Can be either \"winter\", \"spring\", \"summer\" or \"fall\".\n * @param {string} type - The type of show you can search for, can be \"TV\", \"TVNew\", \"TVCon\", \"ONAs\", \"OVAs\", \"Specials\" or \"Movies\".\n */\nconst getSeasons = (year, season, type) => {\n  return new Promise((resolve, reject) => {\n    if (!possibleSeasons[season]) {\n      reject(new Error('[Mal-Scraper]: Entered season does not match any existing season.'));\n      return;\n    }\n    if (!(year <= maxYear) || !(year >= 1917)) {\n      reject(new Error(`[Mal-Scraper]: Year must be between 1917 and ${maxYear}.`));\n      return;\n    }\n    const uri = `${SEASON_URI}${year}/${season}`;\n    axios.get(uri).then(({\n      data\n    }) => {\n      const $ = cheerio.load(data);\n      if (typeof type === 'undefined') {\n        resolve({\n          TV: getType('TV', $),\n          TVNew: getType('TVNew', $),\n          TVCon: getType('TVCon', $),\n          OVAs: getType('OVAs', $),\n          ONAs: getType('ONAs', $),\n          Movies: getType('Movies', $),\n          Specials: getType('Specials', $)\n        });\n      } else {\n        if (!possibleTypes.includes(type)) {\n          reject(new Error(`[Mal-Scraper]: Invalid type provided, Possible options are ${possibleTypes.join(', ')}`));\n          return;\n        }\n        resolve(getType(type, $));\n      }\n    }).catch( /* istanbul ignore next */err => {\n      reject(err);\n    });\n  });\n};\nmodule.exports = getSeasons;","map":{"version":3,"names":["axios","require","cheerio","SEASON_URI","maxYear","Date","getYear","possibleSeasons","winter","spring","summer","fall","type2Class","TV","TVNew","TVCon","OVAs","Movies","Specials","ONAs","possibleTypes","Object","keys","possibleTV","getType","type","$","result","typeString","find","_type","classToSearch","typeClass","includes","tvType","children","each","text","parent","filter","hasClass","general","picture","prod","info","synopsis","push","attr","trim","licensor","slice","title","link","replace","genres","split","producers","fromType","nbEp","releaseDate","score","members","getSeasons","year","season","Promise","resolve","reject","Error","uri","get","then","data","load","join","catch","err","module","exports"],"sources":["C:/Users/elric/Desktop/reactsql/frontend/node_modules/mal-scraper/src/seasons.js"],"sourcesContent":["const axios = require('axios')\nconst cheerio = require('cheerio')\n\nconst SEASON_URI = 'https://myanimelist.net/anime/season/'\nconst maxYear = 1901 + (new Date()).getYear()\nconst possibleSeasons = {\n  winter: 1,\n  spring: 1,\n  summer: 1,\n  fall: 1\n}\n\nconst type2Class = {\n  TV: 1,\n  TVNew: 1,\n  TVCon: 1,\n  OVAs: 2,\n  Movies: 3,\n  Specials: 4,\n  ONAs: 5\n}\n\nconst possibleTypes = Object.keys(type2Class)\nconst possibleTV = {\n  TVNew: 'TV (New)',\n  TVCon: 'TV (Continuing)'\n}\n\nconst getType = (type, $) => {\n  const result = []\n  const typeString = possibleTypes.find((_type) => type === _type)\n\n  let classToSearch = `.js-seasonal-anime-list-key-${type2Class[typeString]} .seasonal-anime.js-seasonal-anime`\n  const typeClass = `.js-seasonal-anime-list-key-${type2Class[typeString]}`\n\n  // If TVNew or TVCon are selected, filter them out to the specific elements on page\n  if (Object.keys(possibleTV).includes(typeString)) {\n    const tvType = possibleTV[typeString]\n\n    $(typeClass).children('.anime-header').each(function () {\n      if ($(this).text() === tvType) {\n        classToSearch = $(this)\n          .parent()\n          .children()\n          .filter(function () { return $(this).hasClass('seasonal-anime') })\n      }\n    })\n  }\n\n  $(classToSearch).each(function () {\n    // For obvious reasons (or not)\n    if ($(this).hasClass('kids') || $(this).hasClass('r18')) return\n\n    const general = $(this).find('div:nth-child(1)')\n    const picture = $(this).find('.image').find('img')\n    const prod = $(this).find('.prodsrc')\n    const info = $(this).find('.information')\n    const synopsis = $(this).find('.synopsis')\n\n    result.push({\n      picture: picture.attr(picture.hasClass('lazyload') ? 'data-src' : 'src'),\n      synopsis: synopsis.find('span').text().trim(),\n      licensor: synopsis.find('p').attr('data-licensors') ? synopsis.find('p').attr('data-licensors').slice(0, -1) : '',\n      title: general.find('.title').find('h2 a').text().trim(),\n      link: general.find('.title').find('a').attr('href') ? general.find('.title').find('a').attr('href').replace('/video', '') : '',\n      genres: general.find('.genres').find('.genres-inner').text().trim().split('\\n      \\n        '),\n      producers: prod.find('.producer').text().trim().split(', '),\n      fromType: prod.find('.source').text().trim(),\n      nbEp: prod.find('.eps').find('a').text().trim().replace(' eps', ''),\n      releaseDate: info.find('.info').find('span').text().trim(),\n      score: info.find('.scormem').find('.score').text().trim(),\n      members: info.find('.scormem').find('.member.fl-r').text().trim().replace(/,/g, '')\n    })\n  })\n\n  return result\n}\n\n/**\n * Allows to gather seasonal information from myanimelist.net\n * @param {number|string} year - The year of the season you want to look up for.\n * @param {string} season - Can be either \"winter\", \"spring\", \"summer\" or \"fall\".\n * @param {string} type - The type of show you can search for, can be \"TV\", \"TVNew\", \"TVCon\", \"ONAs\", \"OVAs\", \"Specials\" or \"Movies\".\n */\nconst getSeasons = (year, season, type) => {\n  return new Promise((resolve, reject) => {\n    if (!possibleSeasons[season]) {\n      reject(new Error('[Mal-Scraper]: Entered season does not match any existing season.'))\n      return\n    }\n    if (!(year <= maxYear) || !(year >= 1917)) {\n      reject(new Error(`[Mal-Scraper]: Year must be between 1917 and ${maxYear}.`))\n      return\n    }\n\n    const uri = `${SEASON_URI}${year}/${season}`\n\n    axios.get(uri)\n      .then(({ data }) => {\n        const $ = cheerio.load(data)\n\n        if (typeof type === 'undefined') {\n          resolve({\n            TV: getType('TV', $),\n            TVNew: getType('TVNew', $),\n            TVCon: getType('TVCon', $),\n            OVAs: getType('OVAs', $),\n            ONAs: getType('ONAs', $),\n            Movies: getType('Movies', $),\n            Specials: getType('Specials', $)\n          })\n        } else {\n          if (!possibleTypes.includes(type)) {\n            reject(new Error(`[Mal-Scraper]: Invalid type provided, Possible options are ${possibleTypes.join(', ')}`))\n            return\n          }\n          resolve(getType(type, $))\n        }\n      })\n      .catch(/* istanbul ignore next */ (err) => {\n        reject(err)\n      })\n  })\n}\n\nmodule.exports = getSeasons\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}