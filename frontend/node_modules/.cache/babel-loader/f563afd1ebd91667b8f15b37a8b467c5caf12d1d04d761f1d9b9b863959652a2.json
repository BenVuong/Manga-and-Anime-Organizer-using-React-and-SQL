{"ast":null,"code":"const axios = require('axios');\nconst cheerio = require('cheerio');\nconst {\n  matchSorter\n} = require('match-sorter');\nconst SEARCH_URI = 'https://myanimelist.net/search/prefix.json';\nconst getFromBorder = ($, t) => {\n  return $(`span:contains(\"${t}\")`).parent().text().trim().split(' ').slice(1).join(' ').split('\\n')[0].trim();\n};\nconst getScoreStats = $ => {\n  const stats = Number($('span[itemprop=\"ratingCount\"]').first().text()).toLocaleString('en-US');\n  return `scored by ${stats} users`;\n};\nconst getPictureUrl = url => {\n  const sizeRegex = /\\/r\\/\\d*x\\d*/;\n  const parts = url.split('.');\n  const completeUrl = parts.slice(0, -1).join('.').replace(sizeRegex, '') + '.jpg';\n  return completeUrl;\n};\nconst parseCharacterOrStaff = (tr, isStaff = false) => {\n  const getPicture = nbChild => {\n    const src = tr.find(`td:nth-child(${nbChild})`).find('img').attr('data-srcset');\n    if (src && src.includes('1x') && src.includes('2x')) {\n      return getPictureUrl(src.split('1x, ')[1].replace(' 2x', ''));\n    } else {\n      // This most likely means that the seiyuu is not here.\n      return undefined;\n    }\n  };\n  return JSON.parse(JSON.stringify({\n    link: tr.find('td:nth-child(1)').find('a').attr('href'),\n    picture: getPicture(1),\n    name: tr.find('td:nth-child(2)').text().trim().split('\\n')[0],\n    role: tr.find('td:nth-child(2)').text().trim().split('\\n')[2].trim(),\n    seiyuu: !isStaff ? {\n      link: tr.find('td:nth-child(3)').find('a').attr('href'),\n      picture: getPicture(3),\n      name: tr.find('td:nth-child(3)').find('a').text().trim()\n    } : undefined\n  }));\n};\nconst getCharactersAndStaff = $ => {\n  const results = {\n    characters: [],\n    staff: []\n  };\n\n  // Characters\n  const leftC = $('div.detail-characters-list').first().find('div.left-column');\n  const rightC = $('div.detail-characters-list').first().find('div.left-right');\n  const nbLeftC = leftC.children('table').length;\n  const nbRightC = rightC.children('table').length;\n\n  // Staff\n  const leftS = $('div.detail-characters-list').last().find('div.left-column');\n  const rightS = $('div.detail-characters-list').last().find('div.left-right');\n  const nbLeftS = leftS.children('table').length;\n  const nbRightS = rightS.children('table').length;\n\n  // Characters\n  for (let i = 1; i <= nbLeftC; ++i) {\n    results.characters.push(parseCharacterOrStaff(leftC.find(`table:nth-child(${i}) > tbody > tr`)));\n  }\n  for (let i = 1; i <= nbRightC; ++i) {\n    results.characters.push(parseCharacterOrStaff(rightC.find(`table:nth-child(${i}) > tbody > tr`)));\n  }\n\n  // Staff\n  for (let i = 1; i <= nbLeftS; ++i) {\n    results.staff.push(parseCharacterOrStaff(leftS.find(`table:nth-child(${i}) > tbody > tr`), true));\n  }\n  for (let i = 1; i <= nbRightS; ++i) {\n    results.staff.push(parseCharacterOrStaff(rightS.find(`table:nth-child(${i}) > tbody > tr`), true));\n  }\n  return results;\n};\nconst parsePage = (data, anime) => {\n  const $ = cheerio.load(data);\n  const result = {};\n  result.title = anime ? $('.title-name').text() : $('.h1-title span').text();\n  result.synopsis = $('.js-scrollfix-bottom-rel [itemprop=\"description\"]').text();\n  result.picture = $('img[itemprop=\"image\"]').attr('data-src');\n  const staffAndCharacters = getCharactersAndStaff($);\n  result.characters = staffAndCharacters.characters;\n  if (anime) {\n    result.staff = staffAndCharacters.staff;\n  }\n  const trailer = $('a.iframe.js-fancybox-video.video-unit.promotion').attr('href');\n  if (trailer) {\n    result.trailer = trailer;\n  }\n\n  // Parsing left border.\n  result.englishTitle = getFromBorder($, 'English:');\n  result.japaneseTitle = getFromBorder($, 'Japanese:');\n  result.synonyms = getFromBorder($, 'Synonyms:').split(', ');\n  result.type = getFromBorder($, 'Type:');\n  if (anime) {\n    result.episodes = getFromBorder($, 'Episodes:');\n    result.aired = getFromBorder($, 'Aired:');\n    result.premiered = getFromBorder($, 'Premiered:');\n    result.broadcast = getFromBorder($, 'Broadcast:');\n    result.producers = getFromBorder($, 'Producers:').split(',       ');\n    result.studios = getFromBorder($, 'Studios:').split(',       ');\n    result.source = getFromBorder($, 'Source:');\n    result.duration = getFromBorder($, 'Duration:');\n    result.rating = getFromBorder($, 'Rating:');\n    result.genres = getFromBorder($, 'Genres:') ? getFromBorder($, 'Genres:').split(', ').map(elem => elem.trim().slice(0, elem.trim().length / 2)) : getFromBorder($, 'Genre:').split(', ').map(elem => elem.trim().slice(0, elem.trim().length / 2));\n  }\n  if (!anime) {\n    result.volumes = getFromBorder($, 'Volumes:');\n    result.chapters = getFromBorder($, 'Chapters:');\n    result.published = getFromBorder($, 'Published:');\n    result.serialization = getFromBorder($, 'Serialization:');\n    result.authors = $('span:contains(\"Authors\")').parent().children('a').map(function (a) {\n      return $(this).text().trim();\n    }).get();\n    result.genres = $('span:contains(\"Genres:\")').parent().children('a').map(function (a) {\n      return $(this).attr('title');\n    }).get();\n  }\n  result.status = getFromBorder($, 'Status:');\n  result.score = getFromBorder($, 'Score:').split(' ')[0].slice(0, -1);\n  result.scoreStats = getScoreStats($);\n  result.ranked = getFromBorder($, 'Ranked:').slice(0, -1);\n  result.popularity = getFromBorder($, 'Popularity:');\n  result.members = getFromBorder($, 'Members:');\n  result.favorites = getFromBorder($, 'Favorites:');\n  return result;\n};\n\n/**\n* Check if the url is for an anime or not\n* @params string url the url to check\n* @return boolean True if the url is for an anime\n**/\nconst isAnimeFromURL = url => {\n  const urlSplitted = url.split('/');\n  return urlSplitted[3] === 'anime';\n};\nconst getInfoFromURL = url => {\n  return new Promise((resolve, reject) => {\n    if (!url || typeof url !== 'string' || !url.toLocaleLowerCase().includes('myanimelist')) {\n      reject(new Error('[Mal-Scraper]: Invalid Url.'));\n      return;\n    }\n    url = encodeURI(url);\n    const anime = isAnimeFromURL(url);\n    axios.get(url).then(({\n      data\n    }) => {\n      const res = parsePage(data, anime);\n      res.id = +url.split(/\\/+/)[3];\n      resolve(res);\n    }).catch( /* istanbul ignore next */err => reject(err));\n  });\n};\nconst getResultsFromSearch = (keyword, type = 'anime') => {\n  return new Promise((resolve, reject) => {\n    if (!keyword) {\n      reject(new Error('[Mal-Scraper]: Received no keyword to search.'));\n      return;\n    }\n    axios.get(SEARCH_URI, {\n      params: {\n        type: type,\n        keyword: keyword.slice(0, 100)\n      }\n    }).then(({\n      data\n    }) => {\n      const items = [];\n      data.categories.forEach(elem => {\n        elem.items.forEach(item => {\n          items.push(item);\n        });\n      });\n      resolve(items);\n    }).catch( /* istanbul ignore next */err => {\n      reject(err);\n    });\n  });\n};\nconst getInfoFromName = (name, getBestMatch = true, type = 'anime') => {\n  return new Promise((resolve, reject) => {\n    if (!name || typeof name !== 'string') {\n      reject(new Error('[Mal-Scraper]: Invalid name.'));\n      return;\n    }\n    getResultsFromSearch(name, type).then(async items => {\n      if (!items.length) {\n        resolve(null);\n        return;\n      }\n      try {\n        const bestMatch = matchSorter(items, name, {\n          keys: ['name']\n        });\n        const itemMatch = getBestMatch && bestMatch && bestMatch.length ? bestMatch[0] : items[0];\n        const url = itemMatch.url;\n        const data = await getInfoFromURL(url);\n        data.url = url;\n        resolve(data);\n      } catch (e) {\n        /* istanbul ignore next */\n        reject(e);\n      }\n    }).catch( /* istanbul ignore next */err => reject(err));\n  });\n};\nmodule.exports = {\n  getInfoFromURL,\n  getResultsFromSearch,\n  getInfoFromName\n};","map":{"version":3,"names":["axios","require","cheerio","matchSorter","SEARCH_URI","getFromBorder","$","t","parent","text","trim","split","slice","join","getScoreStats","stats","Number","first","toLocaleString","getPictureUrl","url","sizeRegex","parts","completeUrl","replace","parseCharacterOrStaff","tr","isStaff","getPicture","nbChild","src","find","attr","includes","undefined","JSON","parse","stringify","link","picture","name","role","seiyuu","getCharactersAndStaff","results","characters","staff","leftC","rightC","nbLeftC","children","length","nbRightC","leftS","last","rightS","nbLeftS","nbRightS","i","push","parsePage","data","anime","load","result","title","synopsis","staffAndCharacters","trailer","englishTitle","japaneseTitle","synonyms","type","episodes","aired","premiered","broadcast","producers","studios","source","duration","rating","genres","map","elem","volumes","chapters","published","serialization","authors","a","get","status","score","scoreStats","ranked","popularity","members","favorites","isAnimeFromURL","urlSplitted","getInfoFromURL","Promise","resolve","reject","toLocaleLowerCase","Error","encodeURI","then","res","id","catch","err","getResultsFromSearch","keyword","params","items","categories","forEach","item","getInfoFromName","getBestMatch","bestMatch","keys","itemMatch","e","module","exports"],"sources":["C:/Users/elric/Desktop/reactsql/frontend/node_modules/mal-scraper/src/info.js"],"sourcesContent":["const axios = require('axios')\nconst cheerio = require('cheerio')\nconst { matchSorter } = require('match-sorter')\n\nconst SEARCH_URI = 'https://myanimelist.net/search/prefix.json'\n\nconst getFromBorder = ($, t) => {\n  return $(`span:contains(\"${t}\")`).parent().text().trim().split(' ').slice(1).join(' ').split('\\n')[0].trim()\n}\n\nconst getScoreStats = ($) => {\n  const stats = Number($('span[itemprop=\"ratingCount\"]').first().text()).toLocaleString('en-US')\n\n  return `scored by ${stats} users`\n}\n\nconst getPictureUrl = (url) => {\n  const sizeRegex = /\\/r\\/\\d*x\\d*/\n  const parts = url.split('.')\n\n  const completeUrl = parts.slice(0, -1).join('.').replace(sizeRegex, '') + '.jpg'\n\n  return completeUrl\n}\n\nconst parseCharacterOrStaff = (tr, isStaff = false) => {\n  const getPicture = (nbChild) => {\n    const src = tr.find(`td:nth-child(${nbChild})`).find('img').attr('data-srcset')\n\n    if (src && src.includes('1x') && src.includes('2x')) {\n      return getPictureUrl(src.split('1x, ')[1].replace(' 2x', ''))\n    } else {\n      // This most likely means that the seiyuu is not here.\n      return undefined\n    }\n  }\n\n  return JSON.parse(JSON.stringify({\n    link: tr.find('td:nth-child(1)').find('a').attr('href'),\n    picture: getPicture(1),\n    name: tr.find('td:nth-child(2)').text().trim().split('\\n')[0],\n    role: tr.find('td:nth-child(2)').text().trim().split('\\n')[2].trim(),\n    seiyuu: !isStaff ? {\n      link: tr.find('td:nth-child(3)').find('a').attr('href'),\n      picture: getPicture(3),\n      name: tr.find('td:nth-child(3)').find('a').text().trim()\n    } : undefined\n  }))\n}\n\nconst getCharactersAndStaff = ($) => {\n  const results = {\n    characters: [],\n    staff: []\n  }\n\n  // Characters\n  const leftC = $('div.detail-characters-list').first().find('div.left-column')\n  const rightC = $('div.detail-characters-list').first().find('div.left-right')\n\n  const nbLeftC = leftC.children('table').length\n  const nbRightC = rightC.children('table').length\n\n  // Staff\n  const leftS = $('div.detail-characters-list').last().find('div.left-column')\n  const rightS = $('div.detail-characters-list').last().find('div.left-right')\n\n  const nbLeftS = leftS.children('table').length\n  const nbRightS = rightS.children('table').length\n\n  // Characters\n  for (let i = 1; i <= nbLeftC; ++i) {\n    results.characters.push(parseCharacterOrStaff(leftC.find(`table:nth-child(${i}) > tbody > tr`)))\n  }\n\n  for (let i = 1; i <= nbRightC; ++i) {\n    results.characters.push(parseCharacterOrStaff(rightC.find(`table:nth-child(${i}) > tbody > tr`)))\n  }\n\n  // Staff\n  for (let i = 1; i <= nbLeftS; ++i) {\n    results.staff.push(parseCharacterOrStaff(leftS.find(`table:nth-child(${i}) > tbody > tr`), true))\n  }\n\n  for (let i = 1; i <= nbRightS; ++i) {\n    results.staff.push(parseCharacterOrStaff(rightS.find(`table:nth-child(${i}) > tbody > tr`), true))\n  }\n\n  return results\n}\n\nconst parsePage = (data, anime) => {\n  const $ = cheerio.load(data)\n  const result = {}\n\n  result.title = anime ? $('.title-name').text() : $('.h1-title span').text()\n  result.synopsis = $('.js-scrollfix-bottom-rel [itemprop=\"description\"]').text()\n  result.picture = $('img[itemprop=\"image\"]').attr('data-src')\n\n  const staffAndCharacters = getCharactersAndStaff($)\n  result.characters = staffAndCharacters.characters\n  if (anime) {\n    result.staff = staffAndCharacters.staff\n  }\n\n  const trailer = $('a.iframe.js-fancybox-video.video-unit.promotion').attr('href')\n  if (trailer) {\n    result.trailer = trailer\n  }\n\n  // Parsing left border.\n  result.englishTitle = getFromBorder($, 'English:')\n  result.japaneseTitle = getFromBorder($, 'Japanese:')\n  result.synonyms = getFromBorder($, 'Synonyms:').split(', ')\n  result.type = getFromBorder($, 'Type:')\n  if (anime) {\n    result.episodes = getFromBorder($, 'Episodes:')\n    result.aired = getFromBorder($, 'Aired:')\n    result.premiered = getFromBorder($, 'Premiered:')\n    result.broadcast = getFromBorder($, 'Broadcast:')\n    result.producers = getFromBorder($, 'Producers:').split(',       ')\n    result.studios = getFromBorder($, 'Studios:').split(',       ')\n    result.source = getFromBorder($, 'Source:')\n    result.duration = getFromBorder($, 'Duration:')\n    result.rating = getFromBorder($, 'Rating:')\n    result.genres = getFromBorder($, 'Genres:')\n      ? getFromBorder($, 'Genres:')\n        .split(', ')\n        .map((elem) => elem.trim().slice(0, elem.trim().length / 2))\n      : getFromBorder($, 'Genre:')\n        .split(', ')\n        .map((elem) => elem.trim().slice(0, elem.trim().length / 2))\n  }\n\n  if (!anime) {\n    result.volumes = getFromBorder($, 'Volumes:')\n    result.chapters = getFromBorder($, 'Chapters:')\n    result.published = getFromBorder($, 'Published:')\n    result.serialization = getFromBorder($, 'Serialization:')\n    result.authors = $('span:contains(\"Authors\")').parent().children('a')\n      .map(function (a) { return $(this).text().trim() }).get()\n    result.genres = $('span:contains(\"Genres:\")').parent().children('a')\n      .map(function (a) { return $(this).attr('title') }).get()\n  }\n\n  result.status = getFromBorder($, 'Status:')\n  result.score = getFromBorder($, 'Score:').split(' ')[0].slice(0, -1)\n  result.scoreStats = getScoreStats($)\n  result.ranked = getFromBorder($, 'Ranked:').slice(0, -1)\n  result.popularity = getFromBorder($, 'Popularity:')\n  result.members = getFromBorder($, 'Members:')\n  result.favorites = getFromBorder($, 'Favorites:')\n\n  return result\n}\n\n/**\n* Check if the url is for an anime or not\n* @params string url the url to check\n* @return boolean True if the url is for an anime\n**/\nconst isAnimeFromURL = url => {\n  const urlSplitted = url.split('/')\n  return urlSplitted[3] === 'anime'\n}\n\nconst getInfoFromURL = (url) => {\n  return new Promise((resolve, reject) => {\n    if (!url || typeof url !== 'string' || !url.toLocaleLowerCase().includes('myanimelist')) {\n      reject(new Error('[Mal-Scraper]: Invalid Url.'))\n      return\n    }\n\n    url = encodeURI(url)\n    const anime = isAnimeFromURL(url)\n\n    axios.get(url)\n      .then(({ data }) => {\n        const res = parsePage(data, anime)\n        res.id = +url.split(/\\/+/)[3]\n        resolve(res)\n      })\n      .catch(/* istanbul ignore next */(err) => reject(err))\n  })\n}\n\nconst getResultsFromSearch = (keyword, type = 'anime') => {\n  return new Promise((resolve, reject) => {\n    if (!keyword) {\n      reject(new Error('[Mal-Scraper]: Received no keyword to search.'))\n      return\n    }\n\n    axios.get(SEARCH_URI, {\n      params: {\n        type: type,\n        keyword: keyword.slice(0, 100)\n      }\n    }).then(({ data }) => {\n      const items = []\n\n      data.categories.forEach((elem) => {\n        elem.items.forEach((item) => {\n          items.push(item)\n        })\n      })\n\n      resolve(items)\n    }).catch(/* istanbul ignore next */(err) => {\n      reject(err)\n    })\n  })\n}\n\nconst getInfoFromName = (name, getBestMatch = true, type = 'anime') => {\n  return new Promise((resolve, reject) => {\n    if (!name || typeof name !== 'string') {\n      reject(new Error('[Mal-Scraper]: Invalid name.'))\n      return\n    }\n\n    getResultsFromSearch(name, type)\n      .then(async (items) => {\n        if (!items.length) {\n          resolve(null)\n          return\n        }\n        try {\n          const bestMatch = matchSorter(items, name, { keys: ['name'] })\n          const itemMatch = getBestMatch && bestMatch && bestMatch.length ? bestMatch[0] : items[0]\n          const url = itemMatch.url\n          const data = await getInfoFromURL(url)\n\n          data.url = url\n\n          resolve(data)\n        } catch (e) {\n          /* istanbul ignore next */\n          reject(e)\n        }\n      })\n      .catch(/* istanbul ignore next */(err) => reject(err))\n  })\n}\n\nmodule.exports = {\n  getInfoFromURL,\n  getResultsFromSearch,\n  getInfoFromName\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}