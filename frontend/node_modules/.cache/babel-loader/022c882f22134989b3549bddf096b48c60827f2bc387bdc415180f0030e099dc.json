{"ast":null,"code":"const axios = require('axios');\nconst toCamelCase = string => {\n  return string.split('_').map((chunk, index) => index ? chunk.charAt(0).toUpperCase() + chunk.slice(1) : chunk).join('');\n};\nconst format = obj => {\n  return Object.keys(obj).reduce((acc, key) => {\n    acc[toCamelCase(key)] = obj[key];\n    return acc;\n  }, {});\n};\n\n/**\n * Allows to retrieve a user's watch lists and stuff.\n * @param {string} user The name of the user.\n * @param {number} after How many results you already have.\n * @param {string} type Can be either 'anime' or 'manga'\n * @param {number} status Status in the user's watch list (completed, on-hold...)\n *\n * @returns {promise}\n */\n\nconst getWatchListFromUser = (user, after = 0, type = 'anime', status = 7) => {\n  return new Promise((resolve, reject) => {\n    if (!user) {\n      reject(new Error('[Mal-Scraper]: No user received.'));\n      return;\n    }\n    axios.get(`https://myanimelist.net/${type}list/${user}/load.json`, {\n      params: {\n        offset: after,\n        status\n      }\n    }).then(({\n      data\n    }) => {\n      resolve(data.map(format));\n    }).catch(err => reject(err));\n  });\n};\nmodule.exports = {\n  getWatchListFromUser\n};","map":{"version":3,"names":["axios","require","toCamelCase","string","split","map","chunk","index","charAt","toUpperCase","slice","join","format","obj","Object","keys","reduce","acc","key","getWatchListFromUser","user","after","type","status","Promise","resolve","reject","Error","get","params","offset","then","data","catch","err","module","exports"],"sources":["C:/Users/elric/Desktop/reactsql/frontend/node_modules/mal-scraper/src/watchList.js"],"sourcesContent":["const axios = require('axios')\n\nconst toCamelCase = (string) => {\n  return string\n    .split('_')\n    .map((chunk, index) => index ? chunk.charAt(0).toUpperCase() + chunk.slice(1) : chunk)\n    .join('')\n}\n\nconst format = (obj) => {\n  return Object.keys(obj)\n    .reduce((acc, key) => {\n      acc[toCamelCase(key)] = obj[key]\n\n      return acc\n    }, {})\n}\n\n/**\n * Allows to retrieve a user's watch lists and stuff.\n * @param {string} user The name of the user.\n * @param {number} after How many results you already have.\n * @param {string} type Can be either 'anime' or 'manga'\n * @param {number} status Status in the user's watch list (completed, on-hold...)\n *\n * @returns {promise}\n */\n\nconst getWatchListFromUser = (user, after = 0, type = 'anime', status = 7) => {\n  return new Promise((resolve, reject) => {\n    if (!user) {\n      reject(new Error('[Mal-Scraper]: No user received.'))\n      return\n    }\n\n    axios.get(`https://myanimelist.net/${type}list/${user}/load.json`, {\n      params: {\n        offset: after,\n        status\n      }\n    })\n      .then(({ data }) => {\n        resolve(data.map(format))\n      })\n      .catch((err) => reject(err))\n  })\n}\n\nmodule.exports = {\n  getWatchListFromUser\n}\n"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC;AAE9B,MAAMC,WAAW,GAAIC,MAAM,IAAK;EAC9B,OAAOA,MAAM,CACVC,KAAK,CAAC,GAAG,CAAC,CACVC,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAKA,KAAK,GAAGD,KAAK,CAACE,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGH,KAAK,CAACI,KAAK,CAAC,CAAC,CAAC,GAAGJ,KAAK,CAAC,CACrFK,IAAI,CAAC,EAAE,CAAC;AACb,CAAC;AAED,MAAMC,MAAM,GAAIC,GAAG,IAAK;EACtB,OAAOC,MAAM,CAACC,IAAI,CAACF,GAAG,CAAC,CACpBG,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAK;IACpBD,GAAG,CAACf,WAAW,CAACgB,GAAG,CAAC,CAAC,GAAGL,GAAG,CAACK,GAAG,CAAC;IAEhC,OAAOD,GAAG;EACZ,CAAC,EAAE,CAAC,CAAC,CAAC;AACV,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAME,oBAAoB,GAAGA,CAACC,IAAI,EAAEC,KAAK,GAAG,CAAC,EAAEC,IAAI,GAAG,OAAO,EAAEC,MAAM,GAAG,CAAC,KAAK;EAC5E,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,IAAI,CAACN,IAAI,EAAE;MACTM,MAAM,CAAC,IAAIC,KAAK,CAAC,kCAAkC,CAAC,CAAC;MACrD;IACF;IAEA3B,KAAK,CAAC4B,GAAG,CAAE,2BAA0BN,IAAK,QAAOF,IAAK,YAAW,EAAE;MACjES,MAAM,EAAE;QACNC,MAAM,EAAET,KAAK;QACbE;MACF;IACF,CAAC,CAAC,CACCQ,IAAI,CAAC,CAAC;MAAEC;IAAK,CAAC,KAAK;MAClBP,OAAO,CAACO,IAAI,CAAC3B,GAAG,CAACO,MAAM,CAAC,CAAC;IAC3B,CAAC,CAAC,CACDqB,KAAK,CAAEC,GAAG,IAAKR,MAAM,CAACQ,GAAG,CAAC,CAAC;EAChC,CAAC,CAAC;AACJ,CAAC;AAEDC,MAAM,CAACC,OAAO,GAAG;EACfjB;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}