{"ast":null,"code":"const axios = require('axios');\nconst cheerio = require('cheerio');\nconst {\n  getResultsFromSearch\n} = require('./info.js');\nconst BASE_URI = 'https://myanimelist.net/anime/';\nconst parsePage = $ => {\n  const allItems = $('tr.episode-list-data');\n  const result = [];\n\n  // Because MAL shows twice the number of elements for the order\n  const items = allItems.slice(0, allItems.length / 2);\n  items.each(function (elem) {\n    result.push({\n      epNumber: +$(this).find('td.episode-number').text().trim(),\n      aired: $(this).find('td.episode-aired').text().trim(),\n      discussionLink: $(this).find('td.episode-forum > a').attr('href'),\n      title: $(this).find('td.episode-title > a').text().trim(),\n      japaneseTitle: $(this).find('td.episode-title > span').text().trim()\n    });\n  });\n  return result;\n};\nconst searchPage = (url, offset = 0, res = []) => {\n  return new Promise((resolve, reject) => {\n    axios.get(url, {\n      params: {\n        offset\n      }\n    }).then(({\n      data\n    }) => {\n      const $ = cheerio.load(data);\n      const tmpRes = parsePage($);\n      res = res.concat(tmpRes);\n      if (tmpRes.length) {\n        searchPage(url, offset + 100, res).then(data => resolve(data)).catch( /* istanbul ignore next */err => reject(err));\n      } else {\n        resolve(res);\n      }\n    }).catch( /* istanbul ignore next */err => reject(err));\n  });\n};\nconst getEpisodesFromName = name => {\n  return new Promise((resolve, reject) => {\n    getResultsFromSearch(name).then(items => {\n      const {\n        url\n      } = items[0];\n      searchPage(`${encodeURI(url)}/episode`).then(data => resolve(data)).catch( /* istanbul ignore next */err => reject(err));\n    }).catch( /* istanbul ignore next */err => reject(err));\n  });\n};\nconst getEpisodesFromNameAndId = (id, name) => {\n  return new Promise((resolve, reject) => {\n    searchPage(`${BASE_URI}${id}/${encodeURI(name)}/episode`).then(data => resolve(data)).catch( /* istanbul ignore next */err => reject(err));\n  });\n};\nconst getEpisodesList = obj => {\n  return new Promise((resolve, reject) => {\n    if (!obj) {\n      reject(new Error('[Mal-Scraper]: No id nor name received.'));\n      return;\n    }\n    if (typeof obj === 'object' && !obj[0]) {\n      const {\n        id,\n        name\n      } = obj;\n      if (!id || !name || isNaN(+id) || typeof name !== 'string') {\n        reject(new Error('[Mal-Scraper]: Malformed input. ID or name is malformed or missing.'));\n        return;\n      }\n      getEpisodesFromNameAndId(id, name).then(data => resolve(data)).catch( /* istanbul ignore next */err => reject(err));\n    } else {\n      getEpisodesFromName(obj).then(data => resolve(data)).catch( /* istanbul ignore next */err => reject(err));\n    }\n  });\n};\nmodule.exports = {\n  getEpisodesList\n};","map":{"version":3,"names":["axios","require","cheerio","getResultsFromSearch","BASE_URI","parsePage","$","allItems","result","items","slice","length","each","elem","push","epNumber","find","text","trim","aired","discussionLink","attr","title","japaneseTitle","searchPage","url","offset","res","Promise","resolve","reject","get","params","then","data","load","tmpRes","concat","catch","err","getEpisodesFromName","name","encodeURI","getEpisodesFromNameAndId","id","getEpisodesList","obj","Error","isNaN","module","exports"],"sources":["C:/Users/elric/Desktop/reactsql/frontend/node_modules/mal-scraper/src/episodes.js"],"sourcesContent":["const axios = require('axios')\nconst cheerio = require('cheerio')\nconst { getResultsFromSearch } = require('./info.js')\n\nconst BASE_URI = 'https://myanimelist.net/anime/'\n\nconst parsePage = ($) => {\n  const allItems = $('tr.episode-list-data')\n  const result = []\n\n  // Because MAL shows twice the number of elements for the order\n  const items = allItems.slice(0, allItems.length / 2)\n\n  items.each(function (elem) {\n    result.push({\n      epNumber: +$(this).find('td.episode-number').text().trim(),\n      aired: $(this).find('td.episode-aired').text().trim(),\n      discussionLink: $(this).find('td.episode-forum > a').attr('href'),\n      title: $(this).find('td.episode-title > a').text().trim(),\n      japaneseTitle: $(this).find('td.episode-title > span').text().trim()\n    })\n  })\n\n  return result\n}\n\nconst searchPage = (url, offset = 0, res = []) => {\n  return new Promise((resolve, reject) => {\n    axios.get(url, {\n      params: {\n        offset\n      }\n    })\n      .then(({ data }) => {\n        const $ = cheerio.load(data)\n\n        const tmpRes = parsePage($)\n        res = res.concat(tmpRes)\n\n        if (tmpRes.length) {\n          searchPage(url, offset + 100, res)\n            .then((data) => resolve(data))\n            .catch(/* istanbul ignore next */(err) => reject(err))\n        } else {\n          resolve(res)\n        }\n      })\n      .catch(/* istanbul ignore next */(err) => reject(err))\n  })\n}\n\nconst getEpisodesFromName = (name) => {\n  return new Promise((resolve, reject) => {\n    getResultsFromSearch(name)\n      .then((items) => {\n        const { url } = items[0]\n\n        searchPage(`${encodeURI(url)}/episode`)\n          .then((data) => resolve(data))\n          .catch(/* istanbul ignore next */(err) => reject(err))\n      })\n      .catch(/* istanbul ignore next */(err) => reject(err))\n  })\n}\n\nconst getEpisodesFromNameAndId = (id, name) => {\n  return new Promise((resolve, reject) => {\n    searchPage(`${BASE_URI}${id}/${encodeURI(name)}/episode`)\n      .then((data) => resolve(data))\n      .catch(/* istanbul ignore next */(err) => reject(err))\n  })\n}\n\nconst getEpisodesList = (obj) => {\n  return new Promise((resolve, reject) => {\n    if (!obj) {\n      reject(new Error('[Mal-Scraper]: No id nor name received.'))\n      return\n    }\n\n    if (typeof obj === 'object' && !obj[0]) {\n      const { id, name } = obj\n\n      if (!id || !name || isNaN(+id) || typeof name !== 'string') {\n        reject(new Error('[Mal-Scraper]: Malformed input. ID or name is malformed or missing.'))\n        return\n      }\n\n      getEpisodesFromNameAndId(id, name)\n        .then((data) => resolve(data))\n        .catch(/* istanbul ignore next */(err) => reject(err))\n    } else {\n      getEpisodesFromName(obj)\n        .then((data) => resolve(data))\n        .catch(/* istanbul ignore next */(err) => reject(err))\n    }\n  })\n}\n\nmodule.exports = {\n  getEpisodesList\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}