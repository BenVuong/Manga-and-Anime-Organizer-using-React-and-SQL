{"ast":null,"code":"const axios = require('axios');\nconst cheerio = require('cheerio');\nconst BASE_URI = 'https://myanimelist.net/profile/';\n\n/**\n * funtction that makes a string in camelCase\n * @param str a string\n * @returns camelCase string\n */\nfunction camelize(str) {\n  return str.replace(/^\\w|[A-Z]|\\b\\w/g, function (word, index) {\n    return index === 0 ? word.toLowerCase() : word.toUpperCase();\n  }).replace(/\\s+/g, '');\n}\n\n/**\n * Method that it's used to add user's favorites\n * @param $\n * @param res the result object\n * @param fav list of favourites\n * @param i integer for specific favorite\n */\nconst addFavorites = ($, res, fav, i) => {\n  if ($(fav).text() !== '') {\n    // check if there are no favorites\n    const favs = [];\n    fav.each(function () {\n      favs.push($(this).text());\n    });\n    if (i === 1) {\n      Object.assign(res, {\n        favoriteAnime: favs\n      });\n    } else if (i === 2) {\n      Object.assign(res, {\n        favoriteManga: favs\n      });\n    } else if (i === 3) {\n      Object.assign(res, {\n        favoriteCharacters: favs\n      });\n    } else {\n      Object.assign(res, {\n        favoritePeople: favs\n      });\n    }\n  }\n};\n\n/* the method that it's used in order to use to parse the page\n   and get all the info we want\n */\nconst parsePage = ($, name) => {\n  const pfp = $('#content .user-image img'); // getting the profile picture page section\n  const statusTitles = $('#content .user-profile .user-status-title'); // getting the status titles page section\n  const statusData = $('#content .user-profile .user-status-data'); // getting the status data page section\n  const result = []; // we will put here all the properties of the final object\n  // pushing some basic properties and values\n  Object.assign(result, {\n    username: name\n  });\n  Object.assign(result, {\n    profilePictureLink: $(pfp).attr('data-src').trim()\n  });\n  Object.assign(result, {\n    lastOnline: $(statusData[0]).text()\n  });\n  statusTitles.each(function (index, status) {\n    if ($(status).text() === 'Gender' || $(status).text() === 'Birthday' || $(status).text() === 'Joined' || $(status).text() === 'Location') {\n      Object.assign(result, {\n        [camelize($(status).text())]: $(statusData[index]).text()\n      });\n    }\n  });\n  const bio = $('#content .profile-about-user .word-break'); // getting the bio page section\n  if ($(bio).text() !== '') {\n    // check if there is no bio\n    Object.assign(result, {\n      Bio: $(bio).text().replace(/\\n\\n/g, '').trim().replace(/\\n/g, ' ').trim()\n    }); // trim the whitespaces and remove extra newlines\n  }\n  // getting the text of the stats page section\n  const stats = $('#statistics .stat-score').text().replace(/\\n\\n/g, '').trim().replace(/\\n/g, ' ').replace(/\\s+/g, ' ').trim();\n  // getting the words of the text\n  const words = stats.split(' ');\n  // pushing the right values\n  Object.assign(result, {\n    animeDays: words[1]\n  });\n  Object.assign(result, {\n    animeMeanScore: words[4]\n  });\n  Object.assign(result, {\n    mangaDays: words[6]\n  });\n  Object.assign(result, {\n    mangaMeanScore: words[9]\n  });\n  /*\n    getting and adding the user's favorites\n    anime, manga, characters and people\n  */\n  const FavoriteAnime = $('#anime_favorites .fs10');\n  addFavorites($, result, FavoriteAnime, 1);\n  const favMangas = $('#manga_favorites .fs10');\n  addFavorites($, result, favMangas, 2);\n  const favChars = $('#character_favorites .fs10');\n  addFavorites($, result, favChars, 3);\n  const favActors = $('.favmore .fs10');\n  addFavorites($, result, favActors, 4);\n  return result;\n};\nconst searchPage = (url, name) => {\n  return new Promise((resolve, reject) => {\n    axios.get(url).then(({\n      data\n    }) => {\n      const $ = cheerio.load(data);\n      const res = parsePage($, name);\n      resolve(res);\n    }).catch( /* istanbul ignore next */err => reject(err));\n  });\n};\nconst getUserFromName = name => {\n  return new Promise((resolve, reject) => {\n    searchPage(`${BASE_URI}${name}`, name).then(data => resolve(data)).catch( /* istanbul ignore next */err => reject(err));\n  });\n};\n\n// wrapper method to check if @name is actually string\nconst getUser = name => {\n  return new Promise((resolve, reject) => {\n    if (!name || typeof name !== 'string') {\n      reject(new Error('[Mal-Scraper]: Malformed input. Name is malformed or missing.'));\n      return;\n    }\n    getUserFromName(name).then(data => resolve(data)).catch( /* istanbul ignore next */err => reject(err));\n  });\n};\nmodule.exports = {\n  getUser\n};","map":{"version":3,"names":["axios","require","cheerio","BASE_URI","camelize","str","replace","word","index","toLowerCase","toUpperCase","addFavorites","$","res","fav","i","text","favs","each","push","Object","assign","favoriteAnime","favoriteManga","favoriteCharacters","favoritePeople","parsePage","name","pfp","statusTitles","statusData","result","username","profilePictureLink","attr","trim","lastOnline","status","bio","Bio","stats","words","split","animeDays","animeMeanScore","mangaDays","mangaMeanScore","FavoriteAnime","favMangas","favChars","favActors","searchPage","url","Promise","resolve","reject","get","then","data","load","catch","err","getUserFromName","getUser","Error","module","exports"],"sources":["C:/Users/elric/Desktop/reactsql/frontend/node_modules/mal-scraper/src/users.js"],"sourcesContent":["const axios = require('axios')\nconst cheerio = require('cheerio')\n\nconst BASE_URI = 'https://myanimelist.net/profile/'\n\n/**\n * funtction that makes a string in camelCase\n * @param str a string\n * @returns camelCase string\n */\nfunction camelize (str) {\n  return str.replace(/^\\w|[A-Z]|\\b\\w/g, function (word, index) {\n    return index === 0 ? word.toLowerCase() : word.toUpperCase()\n  }).replace(/\\s+/g, '')\n}\n\n/**\n * Method that it's used to add user's favorites\n * @param $\n * @param res the result object\n * @param fav list of favourites\n * @param i integer for specific favorite\n */\nconst addFavorites = ($, res, fav, i) => {\n  if ($(fav).text() !== '') { // check if there are no favorites\n    const favs = []\n    fav.each(function () {\n      favs.push($(this).text())\n    })\n    if (i === 1) {\n      Object.assign(res, { favoriteAnime: favs })\n    } else if (i === 2) {\n      Object.assign(res, { favoriteManga: favs })\n    } else if (i === 3) {\n      Object.assign(res, { favoriteCharacters: favs })\n    } else {\n      Object.assign(res, { favoritePeople: favs })\n    }\n  }\n}\n\n/* the method that it's used in order to use to parse the page\n   and get all the info we want\n */\nconst parsePage = ($, name) => {\n  const pfp = $('#content .user-image img') // getting the profile picture page section\n  const statusTitles = $('#content .user-profile .user-status-title') // getting the status titles page section\n  const statusData = $('#content .user-profile .user-status-data') // getting the status data page section\n  const result = [] // we will put here all the properties of the final object\n  // pushing some basic properties and values\n  Object.assign(result, { username: name })\n  Object.assign(result, { profilePictureLink: $(pfp).attr('data-src').trim() })\n  Object.assign(result, { lastOnline: $(statusData[0]).text() })\n  statusTitles.each(function (index, status) {\n    if ($(status).text() === 'Gender' || $(status).text() === 'Birthday' || $(status).text() === 'Joined' || $(status).text() === 'Location') {\n      Object.assign(result, { [camelize($(status).text())]: $(statusData[index]).text() })\n    }\n  })\n  const bio = $('#content .profile-about-user .word-break') // getting the bio page section\n  if ($(bio).text() !== '') { // check if there is no bio\n    Object.assign(result, { Bio: $(bio).text().replace(/\\n\\n/g, '').trim().replace(/\\n/g, ' ').trim() }) // trim the whitespaces and remove extra newlines\n  }\n  // getting the text of the stats page section\n  const stats = $('#statistics .stat-score').text().replace(/\\n\\n/g, '').trim().replace(/\\n/g, ' ').replace(/\\s+/g, ' ').trim()\n  // getting the words of the text\n  const words = stats.split(' ')\n  // pushing the right values\n  Object.assign(result, { animeDays: words[1] })\n  Object.assign(result, { animeMeanScore: words[4] })\n  Object.assign(result, { mangaDays: words[6] })\n  Object.assign(result, { mangaMeanScore: words[9] })\n  /*\n    getting and adding the user's favorites\n    anime, manga, characters and people\n  */\n  const FavoriteAnime = $('#anime_favorites .fs10')\n  addFavorites($, result, FavoriteAnime, 1)\n  const favMangas = $('#manga_favorites .fs10')\n  addFavorites($, result, favMangas, 2)\n  const favChars = $('#character_favorites .fs10')\n  addFavorites($, result, favChars, 3)\n  const favActors = $('.favmore .fs10')\n  addFavorites($, result, favActors, 4)\n  return result\n}\n\nconst searchPage = (url, name) => {\n  return new Promise((resolve, reject) => {\n    axios.get(url)\n      .then(({ data }) => {\n        const $ = cheerio.load(data)\n        const res = parsePage($, name)\n        resolve(res)\n      })\n      .catch(/* istanbul ignore next */(err) => reject(err))\n  })\n}\n\nconst getUserFromName = (name) => {\n  return new Promise((resolve, reject) => {\n    searchPage(`${BASE_URI}${name}`, name)\n      .then((data) => resolve(data))\n      .catch(/* istanbul ignore next */(err) => reject(err))\n  })\n}\n\n// wrapper method to check if @name is actually string\nconst getUser = (name) => {\n  return new Promise((resolve, reject) => {\n    if (!name || typeof name !== 'string') {\n      reject(new Error('[Mal-Scraper]: Malformed input. Name is malformed or missing.'))\n      return\n    }\n\n    getUserFromName(name)\n      .then((data) => resolve(data))\n      .catch(/* istanbul ignore next */(err) => reject(err))\n  })\n}\n\nmodule.exports = {\n  getUser\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}